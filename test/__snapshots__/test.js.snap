// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`block with a single wrapper inside without an array 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with a single wrapper inside without an array with shorter children syntax 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with passing content to an element through props 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    Hello, helper!
  </div>
  children text
</div>
`;

exports[`block with passing content to an element through props using an object 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    Hello, helper!
  </div>
  children text
</div>
`;

exports[`block with passing content to an element through props using an object with props 1`] = `
<div
  className="myBlock"
>
  <a
    className="myBlock__Helper myBlock__Helper_elemMod"
    href="#x"
  >
    Hello, helper!
  </a>
  children text
</div>
`;

exports[`should NOT become a button as a non-neutral type given 1`] = `
<input
  className="myButton"
  type="button"
/>
`;

exports[`should become a button based on an attrubute 1`] = `
<button
  className="myButton"
  type="button"
/>
`;

exports[`should become a label based on an attrubute 1`] = `
<label
  className="myLabel"
  for="myID"
/>
`;

exports[`should become a label based on an attrubute, even when defined as a span 1`] = `
<label
  className="myLabel"
  for="myID"
/>
`;

exports[`should become a radio button based on an attrubute 1`] = `
<input
  className="myRadio"
  type="radio"
/>
`;

exports[`should become a submit button based on an attrubute 1`] = `
<button
  className="mySubmitButton"
  type="submit"
/>
`;

exports[`should become an anchor based on an attrubute 1`] = `
<a
  className="myLink"
  href="#x"
/>
`;

exports[`should become an anchor based on an attrubute, even when defined as a button 1`] = `
<a
  className="myLink"
  href="#x"
/>
`;

exports[`should become an image based on an attrubute 1`] = `
<img
  className="myImage"
  src="kitten.jpg"
/>
`;

exports[`simple block with a Before, and a complex After, and a modifier, and an extraClass 1`] = `
<div
  className="extraClass myBlock extraClass_mod myBlock_mod"
>
  <div
    className="extraClass__Before myBlock__Before"
  />
  <div
    className="ChildBlock"
  >
    some inner text
  </div>
  <div
    className="extraClass__After myBlock__After"
  >
    <div
      className="extraClass__After__Inner myBlock__After__Inner"
    />
  </div>
</div>
`;

exports[`simple block with a Content wrapper 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`simple block with a Content wrapper which is a span 1`] = `
<div
  className="myBlock"
>
  <span
    className="myBlock__Content"
  >
    children text
  </span>
</div>
`;

exports[`simple block with a Content wrapper which is a span and have an extra class 1`] = `
<div
  className="myBlock"
>
  <span
    className="myBlock__Content extraContentClassname"
  >
    children text
  </span>
</div>
`;

exports[`simple block with a Content wrapper which is a span and have an extra class via tagString 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Content extraContentClassname"
  >
    children text
  </div>
</div>
`;

exports[`simple block with a Helper item before children 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  />
  children text
</div>
`;

exports[`simple block with a Helper item before children using a button tag on parent 1`] = `
<button
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  />
  children text
</button>
`;

exports[`simple block with a Helper item that have a string content 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    I am a helper
  </div>
  children text
</div>
`;

exports[`simple block with a Helper item that have a string content which is later overrided 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    Overriding content!
  </div>
  children text
</div>
`;

exports[`simple block with a nested Helper item that should be rendered with diff modifiers on diff elements 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper myBlock__Helper_a1"
  >
    <div
      className="myBlock__Helper2 myBlock__Helper2_a2"
    >
      <div
        className="myBlock__Helper3 myBlock__Helper3_a3"
      />
    </div>
  </div>
  children text
</div>
`;

exports[`simple block with a nested Helper item that should have proper content rendered 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    <div
      className="myBlock__Helper2"
    >
      <div
        className="myBlock__Helper3"
      >
        rendered
      </div>
    </div>
  </div>
  children text
</div>
`;

exports[`simple block with an optional Helper item that should be rendered as it was passed on call 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    I am a Helper
  </div>
  children text
</div>
`;

exports[`simple block with an optional Helper item that should be rendered as it was passed on call but as a boolean 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  />
  children text
</div>
`;

exports[`simple block with an optional Helper item that should be rendered as it was passed on call but as an contentless object with a modifier 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper myBlock__Helper_elmo_whee"
  />
  children text
</div>
`;

exports[`simple block with an optional Helper item that should not be rendered 1`] = `
<div
  className="myBlock"
>
  children text
</div>
`;

exports[`simple block with an optional nested Helper item that should beÂ properly rendered 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    <div
      className="myBlock__Helper__Content"
    >
      I am a Helper
    </div>
  </div>
  children text
</div>
`;

exports[`simple block with an optional nested Helper item that should not be rendered 1`] = `
<div
  className="myBlock"
>
  children text
</div>
`;

exports[`simple block with defaulty content 1`] = `
<div
  className="myBlock"
>
  children text
</div>
`;

exports[`with block that has multiple classes and with an element that has a tagString 1`] = `
<div
  className="myBlock1 myBlock2 myBlock1_blockMod_value myBlock2_blockMod_value"
>
  <span
    className="extraElemCallClass myBlock1__myElem myBlock2__myElem extraElemClass extraElemCallClass_elemMod_value myBlock1__myElem_elemMod_value myBlock2__myElem_elemMod_value extraElemClass_elemMod_value"
  />
</div>
`;

exports[`with boolean modifier 1`] = `
<div
  className="block block_mod"
/>
`;

exports[`with class name only 1`] = `
<div
  className="block block_mod_value"
/>
`;

exports[`with element created through __BemtoElem prop 1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <div
    className="myBlock__MyElem"
  />
</div>
`;

exports[`with element created through __BemtoElem prop with more extensive options  1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <span
    className="myBlock__MyElem myBlock__MyElem_elemMod_value"
  />
</div>
`;

exports[`with falsey boolean modifier 1`] = `
<div
  className="block"
/>
`;

exports[`with id and class name, and local id 1`] = `
<div
  className="block block_mod_value"
  id="newId"
/>
`;

exports[`with multiple a class, some attributes and a child block 1`] = `
<h1
  className="class1 class1_mod_value"
  id="Unique"
  title="hello"
>
  <span
    className="class2"
  />
</h1>
`;

exports[`with multiple classes 1`] = `
<div
  className="block1 block2 block1_mod_value block2_mod_value"
/>
`;

exports[`with multiple classes at different places and multiple modifiers 1`] = `
<div
  className="callClass1 callClass2 defClass1 defClass2 callClass1_mod1_value callClass1_mod2 callClass1_mod3_value callClass2_mod1_value callClass2_mod2 callClass2_mod3_value defClass1_mod1_value defClass1_mod2 defClass1_mod3_value defClass2_mod1_value defClass2_mod2 defClass2_mod3_value"
/>
`;

exports[`with multiple external classes 1`] = `
<div
  className="block1 block2 block1_mod_value block2_mod_value"
/>
`;

exports[`with multiple ids in definition 1`] = `
<span
  className="block block_mod_value"
  id="id1"
/>
`;

exports[`with simple element 1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <div
    className="myBlock__myElem myBlock__myElem_elemMod_value"
  />
</div>
`;

exports[`with simple element using chaining 1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <div
    className="myBlock__MyElem myBlock__MyElem_elemMod_value"
  />
</div>
`;

exports[`with tag and explicit class name 1`] = `
<span
  className="block block_mod_value"
/>
`;

exports[`with tag and explicit id and class name 1`] = `
<span
  className="block block_mod_value"
  id="id"
/>
`;

exports[`with tag name and external className (options as an object with a parsed tag) 1`] = `
<span
  className="block block_mod_value"
/>
`;

exports[`with tag name and external className (options as an object) 1`] = `
<span
  className="block block_mod_value"
/>
`;

exports[`with tag name and external className 1`] = `
<div
  className="block block_mod_value"
/>
`;

exports[`with tagString as well as with options 1`] = `
<strong
  className="block optCls tgsClsnm block_mod_value optCls_mod_value tgsClsnm_mod_value"
  id="optID"
/>
`;

exports[`with two simple nested elements using chaining 1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <div
    className="myBlock__MyElem myBlock__MyElem_elemMod_value"
  >
    <div
      className="myBlock__MyElem2 myBlock__MyElem2_elem2Mod_value"
    />
  </div>
</div>
`;

exports[`without anything, but with external className  (options as an empty object) 1`] = `
<div
  className="block block_mod_value"
/>
`;

exports[`without anything, but with external className 1`] = `
<div
  className="block block_mod_value"
/>
`;
